#ifndef _CONFIG_H
#define _CONFIG_H


#define DEBUG			@CONFIG_DEBUG@
#define FREESTANDING		@CONFIG_FREESTANDING@

#define CONFIG_JNI		@CONFIG_JNI@
#define CONFIG_JAR		@CONFIG_JAR@
#define CONFIG_SYSROOT 		"@CONFIG_SYSROOT@"


#define APP_NAME		"@CONFIG_PACKAGE@"
#define APP_VERSION		"@CONFIG_VERSION@"
#define APP_COPY		"@CONFIG_COPY@"
#define APP_CDATE		__DATE__
#define APP_CTIME		__TIME__

#define APP_CC			"@CC@"
#define APP_CC_VERSION		__VERSION__



#define APP_VERSION_FORMAT										\
		"%s %s\nCopyright (C) %s\nBuilt with %s %s (%s:%s)\n"
#define APP_VERSION_ARGS										\
		APP_NAME, APP_VERSION, APP_COPY, APP_CC, APP_CC_VERSION,				\
		APP_CDATE, APP_CTIME


#include <stddef.h>
#include <stdarg.h>
#include <stdint.h>

#if DEBUG && !FREESTANDING
#include <stdlib.h>
#include <stdio.h>
#define LOG(x)			\
	{ printf("%s: %s\n", APP_NAME, x); }
#define LOGF(x, y...)	\
	{ printf("%s: " x "\n", APP_NAME, y); }

#define ASSERT(x)	\
	{ if(unlikely(!(x))) { LOGF("Assertion \"%s\" failed in %s:%d", #x, __FILE__, __LINE__); abort(); } }

#else
#define LOG(x)
#define LOGF(x, y...)
#define ASSERT(x)
#endif

#if FREESTANDING
#define PRINTF(x, y...)
#define EXIT(x)	for(;;)
#else
#include <stdlib.h>
#include <stdio.h>
#define PRINTF(x, y...)	\
	{ printf(x, y); }
#define EXIT(x) exit(x)
#endif


#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wnonnull"
#endif



#define INITIALIZE_PATH() {							\
		avm_path_add(CONFIG_SYSROOT "/usr/lib");			\
		avm_path_add(CONFIG_SYSROOT "/usr/local/lib");			\
		avm_path_add(CONFIG_SYSROOT "/usr/share/java");			\
	}

#endif
